import Foundation
import Combine

///SUBJECTS
/*
 Subjects are special type of Publishers.
 So far, we have seen publishers that publish values that given to them, or generated by them internally.
 
 Sometimes we want to have a Publisher that we can send values to after it has been configured and is in use by a stream.
 
 These special types of Publishers called Subjects.
 */

//PassthroughSubject

let subject = PassthroughSubject<String, Never>()
subject.sink { print("1) received \($0)") }
print("Stream set up")

subject.send("Message 1")
subject.send("Message 2")

print("------------")

let subject2 = PassthroughSubject<String, Never>()
subject2.sink { completion in
    print(completion)
} receiveValue: { value in
    print(value)
}

subject2.send("2) Testing completion...")
subject2.send(completion: .finished)

print("------------")

struct CustomError: Error { }

let subject3 = PassthroughSubject<String, CustomError>()
subject3.sink { completion in
    print(completion)
} receiveValue: { value in
    print(value)
}

subject3.send("3) Testing completion...")
subject3.send(completion: .failure(CustomError()))

print("------------")

//CurrentValueSubject

let wordOfTheDay = CurrentValueSubject<String, Never>("bellicose")
wordOfTheDay.sink { print("The word of the day is '\($0)'.")}
wordOfTheDay.send("erudite")

wordOfTheDay.sink { print("Second subscriber received \($0)")}
wordOfTheDay.send("cogitable")

let buttonTapSubject = PassthroughSubject<Void, Never>()
buttonTapSubject.send()



